name: Build go-server-template
on:
  workflow_dispatch:
env:
  IMAGE_NAME: go-server-template
jobs:
  container:
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.set_var.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set VERSION environment variable
        run: |
          echo "VERSION=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "${{ env.VERSION }}"
          echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT
      - name: Get Version
        run: echo $VERSION
      - name: Build Docker container
        run: docker build -t ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:${{ env.VERSION }} -f container/service.Dockerfile .
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Tag image Latest
        if: github.ref == 'refs/heads/development'
        run: |
          docker tag ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:latest
          docker push ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:latest
      - name: Tag image Production Latest
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:prod-latest
          docker push ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:prod-latest
      - name: Push image
        run: |
          docker push ghcr.io/GoServerTemplate/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
  deploy-backend-dev:
    runs-on: ubuntu-latest
    needs: container
    # Only run this job if the push is on the 'main' branch
    if: github.ref == 'refs/heads/development'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Version
        run: |
          echo "Received from container: ${{ needs.container.outputs.version }}"
      - name: Copy file to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "container/development.compose.yml"
          target: "~/server-template/"
      # Use SSH to connect to remote server
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          debug: true
          script: |
            echo "${{secrets.PACKAGES_ACCESS_TOKEN}}" | docker login ghcr.io -u maikelh --password-stdin
            cd server-template/container
            docker compose -f development.compose.yml pull 
            docker compose -f development.compose.yml up -d
  deploy-backend-production:
    runs-on: ubuntu-latest
    needs: container
    # Only run this job if the push is on the 'main' branch
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Version
        run: |
          echo "Received from container: ${{ needs.container.outputs.version }}"
      - name: Copy file to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "container/production.compose.yml"
          target: "~/server-template/"
      # Use SSH to connect to remote server
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          debug: true
          script: |
            echo "${{secrets.PACKAGES_ACCESS_TOKEN}}" | docker login ghcr.io -u maikelh --password-stdin
            cd server-template/container
            docker compose -f production.compose.yml pull 
            docker compose -f production.compose.yml up -d