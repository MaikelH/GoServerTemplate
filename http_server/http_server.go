package http_server

import (
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-fuego/fuego"
	"goservertemplate/errors"
	"goservertemplate/http_server/controllers"
	"goservertemplate/types"
	"log/slog"
)

func StartHTTPServer(c *types.Configuration) error {
	slog.Info("Initializing HTTP server")

	if c.ListenAddress == "" {
		slog.Error("missing listen address")
		return errors.NewServiceError(errors.ErrServerError, nil, "missing listen address")
	}

	s := fuego.NewServer(fuego.WithAddr(c.ListenAddress),
		fuego.WithSecurity(openapi3.SecuritySchemes{
			"bearerAuth": &openapi3.SecuritySchemeRef{
				Value: openapi3.NewSecurityScheme().
					WithType("http").
					WithScheme("bearer").
					WithBearerFormat("JWT").
					WithDescription("Enter your JWT token in the format: Bearer <token>"),
			},
		}))

	if c.OpenAPIAddress != "" {
		s.OpenApiSpec.Servers = []*openapi3.Server{{URL: c.OpenAPIAddress}}
	} else {
		s.OpenApiSpec.Servers = []*openapi3.Server{{URL: fmt.Sprintf("%s", c.ListenAddress)}}
	}
	s.OpenApiSpec.Info.Title = "Retrolink"
	s.OpenApiSpec.Info.Description = "This is the autogenerated OpenAPI documentation for Retrolink."

	apiGroup := fuego.Group(s, "/api/v1")

	userController := controllers.UserController{}
	userController.MountRoutes(apiGroup, c)

	err := s.Run()
	if err != nil {
		slog.Error("error starting HTTP server", "error", err)
		return errors.NewServiceError(errors.ErrServerError, err, "error starting HTTP server")
	}

	return nil
}
